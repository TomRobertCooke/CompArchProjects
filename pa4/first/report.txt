I mostly just used dynamically allocated arrays in this program. I used them for the valid bits, the lru, and the main cache. They allowed me to access the most recently used and least recently used in constant time, while also allowing me to access valid bits and cache entries with the same exact input information. It simplified a lot of the algorithmic work without making it much slower in the first place. In LRU, this forced me to update the array every time it was accessed to prevent duplicate numbers in the array.

The prefetcher didn't seem to help at all in a fully associative cache. If anything, it made it worse. In every other associativity, it seemed to work well, decreasing the amount of misses by the same proportionate amount each time. I think this is because next block was never in the cache in a fully associative cache, because it pointed to the same spot in the cache as the block that was just replaced. This seems to work really well with higher associativities because the prefetched block has a lesser chance of replacing something frequently accessed, and chances are it will still be in the cache by the time it is requested again. So higher associativity seems to be really good, but fully associative is terrible.
